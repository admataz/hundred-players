{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../client/App.svelte",
    "../client/Login.svelte",
    "../client/Controls.svelte",
    "../client/Score.svelte",
    "../client/Arena.svelte",
    "../client/ReceivedMessages.svelte",
    "../client/Player.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Pusher from \"pusher-js\";\n  import Login from \"./Login.svelte\";\n  import Controls from \"./Controls.svelte\";\n  import Arena from \"./Arena.svelte\";\n  import Score from \"./Score.svelte\";\n  import ReceivedMessages from './ReceivedMessages.svelte'\n\n  export let pusher = null;\n  export let usertoken = null;\n  export let pusherChannel = null;\n  export let messagesChannel = null;\n  export let isGameHost = false;\n\n  let receivedMessages = [];\n  let currentPlayers = [];\n  let me = null;\n  let playerPositions = {};\n  let playerDefaultStartPos = {\n    xPos: 0,\n    yPos: 0,\n    vForce: 0,\n    hForce: 0,\n    speed: 3\n  };\n  let startBallPos = {\n    xPos: 50,\n    yPos: 50,\n    speed: 0,\n    hForce: 1,\n    vForce: 1\n  };\n  let ballPos = { ...startBallPos };\n  let scoreline = [0, 0];\n  let arenaSize = { width: 100, height: 100 };\n  let playerSpeed = 1;\n  let konamiEnabled = false\n\n  const setCurrentMembers = pusherMembers => {\n    const members = [];\n    if (!pusherMembers) {\n      return members;\n    }\n    pusherMembers.each(m => {\n      members.push(m);\n    });\n\n    isGameHost = pusherChannel.members.me.id === members[0].id;\n    return members;\n  };\n\n  const pusherInit = () => {\n    pusher = new Pusher(\"5682fcdf7df3eb814416\", {\n      cluster: \"eu\",\n      forceTLS: true,\n      auth: {\n        headers: {\n          authorization: `Bearer ${usertoken}`\n        }\n      }\n    });\n\n    pusherChannel = pusher.subscribe(\"presence-lnug-channel\");\n    messagesChannel = pusher.subscribe(\"lnug-game-cheers\");\n\n    pusherChannel.bind(\"pusher:subscription_succeeded\", function(members) {\n      currentPlayers = setCurrentMembers(pusherChannel.members);\n      me = pusherChannel.members.me;\n      const team = currentPlayers.length % 2;\n\n      updatePlayerPositions(me.id, {\n        ...playerDefaultStartPos,\n        team,\n        xPos: team ? arenaSize.width - 10 : 10,\n        yPos: Math.random() * arenaSize.height\n      });\n    });\n\n    pusherChannel.bind(\"pusher:member_added\", function(member) {\n      currentPlayers = setCurrentMembers(pusherChannel.members);\n      pusherChannel.trigger(\"client-player-move\", playerPositions[me.id]);\n      if (isGameHost) {\n        pusherChannel.trigger(\"client-init\", { scoreline });\n      }\n    });\n\n    pusherChannel.bind(\"pusher:member_removed\", function(member) {\n      currentPlayers = setCurrentMembers(pusherChannel.members);\n    });\n\n    pusherChannel.bind(\"client-player-move\", function(data, meta) {\n      updatePlayerPositions(meta.user_id, data);\n    });\n\n    pusherChannel.bind(\"client-ball-bounce\", function(data, meta) {\n      updateBallPosition(data);\n    });\n\n    pusherChannel.bind(\"client-init\", function({ scoreline }, meta) {\n      updateScoreline(scoreline);\n    });\n\n    pusherChannel.bind(\"client-goal\", function(data, meta) {\n      updateScoreline(data);\n      updateBallPosition(startBallPos);\n    });\n\n    messagesChannel.bind('twitter-hoorah', function(data){\n      receivedMessages = [...receivedMessages, data]\n    })\n  };\n\n  const onSubmit = async evt => {\n    const response = await fetch(\"/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ username: evt.detail })\n    });\n\n    const data = await response.json();\n    usertoken = data.token;\n\n    if (usertoken) {\n      pusherInit();\n    }\n  };\n\n  const updatePlayerPositions = (id, position) => {\n    playerPositions = {\n      ...playerPositions,\n      [id]: position\n    };\n  };\n\n  const updateBallPosition = newBallPos => {\n    ballPos = {\n      ...startBallPos,\n      ...newBallPos\n    };\n  };\n\n  const updateScoreline = newScoreline => {\n    scoreline = newScoreline;\n  };\n\n  const onPlayerControl = evt => {\n    console.log(konamiEnabled)\n    const position = {\n      ...playerDefaultStartPos,\n      ...playerPositions[me.id],\n      ...evt.detail,\n      speed: playerSpeed,\n      konamiEnabled\n    };\n    updatePlayerPositions(me.id, position);\n    pusherChannel.trigger(\"client-player-move\", position);\n  };\n\n  const onGoal = evt => {\n    const newScoreline = [...scoreline];\n    if (evt.detail === \"left\") {\n      newScoreline[0] += 1;\n    } else {\n      newScoreline[1] += 1;\n    }\n    if (isGameHost) {\n      ballPos = startBallPos;\n      updateScoreline(newScoreline);\n      pusherChannel.trigger(\"client-goal\", newScoreline);\n    }\n  };\n\n  const onBallCollide = evt => {\n    if (isGameHost) {\n      updateBallPosition(evt.detail);\n      pusherChannel.trigger(\"client-ball-bounce\", evt.detail);\n    }\n  };\n\n  const onKonami = evt => {\n    konamiEnabled = true;\n    console.log('KONAMI!!!')\n    setTimeout(()=>konamiEnabled = false, 20000)\n  }\n</script>\n\n<style>\n  .gamearea {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 100%;\n  }\n  .scoreboard{\n      flex: 0 1 0;\n      background-color: #999;\n  }\n  .arena{\n      flex: 1\n\n  }\n  .controls{\n    background-color: #efefef;\n      flex: 0 1 0;\n  }\n \n .messagesbanner{\n   flex: 0 1 0;\n\n }\n\n\n</style>\n\n{#if !usertoken}\n\n  <Login on:submit={onSubmit} />\n{:else}\n\n  <div class=\"gamearea\">\n    <div class=\"messagesbanner\">\n       <ReceivedMessages messages={receivedMessages} />\n    </div>\n    <div class=\"scoreboard\">\n      <Score {scoreline} />\n    </div>\n\n    <div class=\"arena\">\n      <Arena\n        {playerPositions}\n        {currentPlayers}\n        {ballPos}\n        on:ballcollide={onBallCollide}\n        on:goooooal={onGoal} />\n    </div>\n\n    <div class=\"controls\">\n      <Controls on:controls={onPlayerControl} on:konami={onKonami} />\n      <div class=\"greeting\">\n        {#if me}Hello {me.info.name}!{/if}\n      </div>\n    </div>\n\n\n  </div>\n{/if}\n",
    "<script>\nimport {createEventDispatcher} from 'svelte'\nconst dispatch = createEventDispatcher()\n\nexport let username\nexport const onSubmit = (evt) =>  {\n    dispatch('submit', username)\n}\n</script>\n\n<style>\n.registration-form-container{\n  width: 100%;\n  height: 100%;\n  border: 3px solid #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: green;\n}\n\n#registrationForm{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 340px;\n  height: 340px;\n  background: rgba(255, 255, 255, 0.5);\n  padding: 20px;\n  border: 2px solid yellow;\n  text-align:center;\n}\n\nlabel{\n  margin: 10px;\n  font-size: 24px;\n  font-weight: bold;\n}\n\n.input-text{\n  width: 3em;\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n  display:block;\n}\n\n.input-button{\n  width: 64px;\n  height: 64px;\n  display:block;\n  border-radius: 50%;\n  border: 2px solid #000;\n}\n\n</style>\n<div class=\"registration-form-container\">\n<form id=\"registrationForm\" on:submit|preventDefault={onSubmit}>\n\n  <label>Your initials <br/>(2 characters)</label>\n  <input class=\"input-text\" bind:value={username} autofocus maxlength=\"2\" size=\"2\">\n  <input class=\"input-button\" type=\"submit\" value=\"go\">\n</form>\n</div>",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let dir = { hForce: 0, vForce: 0 };\n  export let activeKeys = new Map();\n  export let sequence = \"\";\n\n  function goLeft() {\n    sequence = `${sequence}h`;\n    dir = { vForce: 0, hForce: -1 };\n  }\n\n  function goRight() {\n    sequence = `${sequence}l`;\n    dir = { vForce: 0, hForce: 1 };\n  }\n\n  function goUp() {\n    sequence = `${sequence}k`;\n    dir = { hForce: 0, vForce: -1 };\n  }\n\n  function goDown() {\n    sequence = `${sequence}j`;\n    dir = { hForce: 0, vForce: 1 };\n  }\n\n  function hitA() {\n    sequence = `${sequence}a`;\n  }\n  function hitB() {\n    sequence = `${sequence}b`;\n  }\n\n  function goStop() {\n    dir = { vForce: 0, hForce: 0 };\n  }\n\n  const onKeyDown = evt => {\n    // debounce\n    if (activeKeys.get(evt.key)) {\n      return;\n    }\n    activeKeys.set(evt.key, true);\n\n    switch (evt.key) {\n      case \"j\":\n      case \"ArrowDown\":\n        goDown();\n        return;\n      case \"k\":\n      case \"ArrowUp\":\n        goUp();\n        return;\n      case \"h\":\n      case \"ArrowLeft\":\n        goLeft();\n        return;\n      case \"l\":\n      case \"ArrowRight\":\n        goRight();\n        return;\n      case \"a\":\n        hitA();\n        return;\n      case \"b\":\n        hitB();\n        return;\n      default:\n        return null;\n    }\n  };\n\n  const onKeyUp = evt => {\n    activeKeys.set(evt.key, false);\n    if (sequence.match(\"kkjjhlhlba\")) {\n      dispatch('konami');\n      \n      sequence = \"\";\n    }\n    switch (evt.key) {\n      case \"j\":\n      case \"ArrowDown\":\n      case \"k\":\n      case \"ArrowUp\":\n      case \"h\":\n      case \"ArrowLeft\":\n      case \"l\":\n      case \"ArrowRight\":\n        goStop();\n        return;\n      default:\n        return null;\n    }\n  };\n  $: dispatch(\"controls\", dir);\n</script>\n\n<style>\n.controls-container{\n    bottom: 0;\n    width: 100%;\n\n}\n  .controls {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    border: 1px solid #000;\n      \n  }\n  .controls .button-row{\n      display: flex;\n      width: 100%;\n      justify-content: center;\n      align-content: center;\n  }\n\n  button{\n      flex: 1;\n      margin: 2px;\n      max-width: 100px;\n      height: 48px;\n      border-radius: 21px;\n      border-color: #000;\n      border-width: 4px;\n  }\n  .minor-buttons button{\n      padding: 2px;\n      height: 42px;\n      max-width: 42px \n  }\n</style>\n\n<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\n<div class=\"controls-container\">\n<div class=\"controls\">\n  <div class=\"button-row minor-buttons\">\n    <button on:mousedown={hitA} on:mouseup={goStop} on:touchstart={hitA} on:touchend={goStop}>A</button>\n    <button on:mousedown={hitB} on:mouseup={goStop} on:touchstart={hitB} on:touchend={goStop}>B</button>\n  </div>\n  <div class=\"button-row\">\n    <button on:mousedown={goUp} on:mouseup={goStop} on:touchstart={goUp} on:touchend={goStop}>Up</button>\n  </div>\n  <div class=\"button-row\">\n    <button on:mousedown={goLeft} on:mouseup={goStop} on:touchstart={goLeft} on:touchend={goStop}>left</button>\n    <button on:mousedown={goRight} on:mouseup={goStop} on:touchstart={goRight} on:touchend={goStop}>right</button>\n  </div>\n  <div class=\"button-row\">\n    <button on:mousedown={goDown} on:mouseup={goStop} on:touchstart={goDown} on:touchend={goStop}>down</button>\n  </div>\n<div class=\"button-row\">(arrow keys and vi style `hjkl` also work)</div>\n</div>\n\n</div>\n",
    "<script>\n    export let scoreline = [0,0]\n    \n</script>\n\n<style>\n.scoreboard{\n    display: flex;\n    justify-content: center;\n}\n.score{\n    border-radius: 10px;\n    background: black;\n    color: gold;\n    padding: 10px;\n    flex: 0 1 64px;\n    margin: 4px;\n    text-align: center;\n    font-size: 32px;\n}\n\n.team {\n    width: 10px;\nmargin: 4px;\n}\n\n.team-1{\n    background-color: red;\n}\n\n.team-0{\n    background-color: blue;\n}\n\n</style>\n\n\n<div class=\"scoreboard\">\n    <div class=\"team team-1\"></div>\n    <div class=\"score\">{scoreline[1]}</div>\n    <div class=\"score\">{scoreline[0]}</div>\n    <div class=\"team team-0\"></div>\n</div>",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import Player from \"./Player.svelte\";\n  import Ball from \"./Ball.svelte\";\n  import Goal from \"./Goal.svelte\";\n  export let playerPositions = {};\n  export let renderedPlayers = [];\n  export let currentPlayers = [];\n  export let ballPos = {\n    xPos: 50,\n    yPos: 50,\n    speed: 0,\n    hForce: 1,\n    vForce: 1\n  };\n\n  const dispatch = createEventDispatcher();\n\n  export let playerFriction = 0.05;\n  export let ballFriction = 0.08;\n\n  export let arenaSize = { width: 100, height: 100 };\n  export let goalSize = 30;\n  export let collisionProximity = 2.8;\n  export let kickVariation = 1.5;\n\n  let containerWidth;\n  let containerHeight;\n\n  const animStep = () => {\n    Object.entries(playerPositions).forEach(([key, p]) => {\n      if (p.speed > playerFriction / 2) {\n        p.speed -= playerFriction;\n      } else {\n        p.speed = 0;\n      }\n      if (ballPos.speed > ballFriction / 2) {\n        ballPos.speed -= ballFriction;\n      } else {\n        ballPos.speed = 0;\n      }\n\n      const newxPos = p.xPos + p.hForce * p.speed;\n      if (0 < newxPos && arenaSize.width > newxPos) {\n        p.xPos = newxPos;\n      }\n\n      const newyPos = p.yPos + p.vForce * p.speed;\n      if (0 < newyPos && arenaSize.height > newyPos) {\n        p.yPos = newyPos;\n      }\n\n      if (\n        Math.abs(ballPos.xPos - p.xPos) <= collisionProximity &&\n        Math.abs(ballPos.yPos - p.yPos) <= collisionProximity\n      ) {\n        ballPos.speed = p.speed * 2;\n        if (p.xPos > ballPos.xPos) {\n          ballPos.hForce = -1 * (Math.random() * kickVariation);\n          ballPos.xPos -= collisionProximity;\n        } else {\n          ballPos.hForce = Math.random() * kickVariation;\n          ballPos.xPos += collisionProximity;\n        }\n\n        if (p.yPos > ballPos.yPos) {\n          ballPos.yPos -= collisionProximity;\n          ballPos.vForce = -1 * (Math.random() * kickVariation);\n        } else {\n          ballPos.yPos += collisionProximity;\n          ballPos.vForce = Math.random() * kickVariation;\n        }\n        dispatch(\"ballcollide\", ballPos);\n      }\n    });\n\n    renderedPlayers = currentPlayers.map(m => ({\n      ...m,\n      ...playerPositions[m.id]\n    }));\n\n    if (ballPos.xPos >= arenaSize.width) {\n      if (\n        arenaSize.height / 2 - goalSize / 2 < ballPos.yPos &&\n        arenaSize.height / 2 + goalSize / 2 > ballPos.yPos\n      ) {\n        dispatch(\"goooooal\", \"right\");\n      } else {\n        ballPos.hForce = -1;\n      }\n    }\n\n    if (ballPos.xPos < 0) {\n      if (\n        arenaSize.height / 2 - goalSize / 2 < ballPos.yPos &&\n        arenaSize.height / 2 + goalSize / 2 > ballPos.yPos\n      ) {\n        dispatch(\"goooooal\", \"left\");\n      } else {\n        ballPos.hForce = 1;\n      }\n    }\n\n    if (ballPos.yPos >= arenaSize.height) {\n      ballPos.vForce = -1;\n    }\n\n    if (ballPos.yPos < 0) {\n      ballPos.vForce = 1;\n    }\n\n    ballPos = {\n      ...ballPos,\n      xPos: ballPos.xPos + ballPos.hForce * ballPos.speed,\n      yPos: ballPos.yPos + ballPos.vForce * ballPos.speed\n    };\n    window.requestAnimationFrame(animStep);\n  };\n  animStep();\n\n  $: goalPosts = {\n    top: arenaSize.height / 2 - goalSize / 2,\n    bottom: arenaSize.height / 2 + goalSize / 2\n  };\n</script>\n\n<style>\n  main {\n    border: 1px solid #000;\n    position: relative;\n  }\n  .svgcanvas {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n  }\n  .linemarkings {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n\n  .playingfield {\n    background: green;\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n\n  .line {\n    stroke: white;\n    opacity: 0.5;\n    stroke-width: 5;\n    fill: none;\n  }\n</style>\n\n<main class=\"playingfield\">\n  <svg class=\"linemarkings\">\n    <g class=\"line\">\n      <circle cx=\"50%\" cy=\"50%\" r=\"20%\" />\n      <circle cx=\"50%\" cy=\"50%\" r=\"5\" />\n      <line x1=\"50%\" x2=\"50%\" y1=\"0\" y2=\"100%\" />\n    </g>\n  </svg>\n\n  <svg class=\"svgcanvas\">\n    <Goal side=\"left\" {goalPosts} size={goalSize} />\n    <Goal side=\"right\" {goalPosts} size={goalSize} />\n    <Ball {...ballPos} />\n    {#each renderedPlayers as player}\n      <Player {player} xPos={player.xPos} yPos={player.yPos} konami={player.konamiEnabled} />\n    {/each}\n  </svg>\n\n</main>\n",
    "<script>    \n    import {slide} from 'svelte/transition/'\n    export let messages = [];\n    let currentMessageIndex = 0\n    let currentMessageText = ''\n    let displayMessageText = false\n    let messagePosition = 100\n    \n    function switchMessages(){\n        if(!messages.length){\n            return\n        }\n        displayMessageText = false\n            \n\n        setTimeout(()=>{\n            currentMessageIndex +=1;\n            currentMessageText = messages[currentMessageIndex%messages.length].tweet\n            displayMessageText = true\n            messagePosition = 100;\n            \n        }, 1000)\n    }\n\n    let messageTimer = setInterval(switchMessages, 10000)\n\n    function scrollMessage(){\n        messagePosition -= 1;\n        window.requestAnimationFrame(scrollMessage);\n    }\n    scrollMessage();\n\n</script>\n\n<style>\n  .received-messages {\n    background-color: #000;\n    color: #fff;\n    width: 100%;\n    height: 24px;\n    position: relative;\n    overflow: hidden;\n    font-size: 12px;\n    padding: 2px;\n  }\n\n  .message {\n    position: absolute;\n    white-space: nowrap;\n  }\n\n\n\n    \n  \n\n</style>\n\n<div class=\"received-messages\">\n    {#if displayMessageText}\n    <div class=\"message\" transition:slide  style=\"left:{messagePosition}px\">{currentMessageText}</div>\n    {/if}\n\n</div>\n",
    "<script>\n  export let player;\n  export let xPos = 0;\n  export let yPos = 0;\n  export let konami = true;\n</script>\n\n<style>\n  .player {\n    fill: none;\n    stroke-width: 2;\n    stroke: #fff;\n  }\n\n  .player-name {\n    font-size: 14px;\n    text-transform: uppercase;\n    fill: #fff;\n  }\n  .team-0 {\n    fill: red;\n  }\n\n  .team-1 {\n    fill: blue;\n  }\n</style>\n\n<svg y=\"{yPos}%\" x=\"{xPos}%\" overflow=\"visible\">\n  <text class=\"player-name\" x=\"-10\" y=\"27\">\n    {player.konamiEnabled ? \"😀\" :  player.info.name}\n  </text>\n    <rect\n    class=\"player team-{player.team}\"\n    width=\"20\"\n    height=\"20\"\n    rx=\"5\"\n    x=\"-10\"\n    y=\"-10\" />\n    <circle\n      r=\"2\"\n      fill=\"yellow\"\n      />\n</svg>\n\n\n "
  ],
  "names": [],
  "mappings": "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"
}